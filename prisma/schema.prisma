// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(uuid())
  clerkId       String        @unique
  name          String
  email         String        @unique
  profilePicUrl String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[]
  categories    Category[]
  budgets       Budget[]
  accounts      Account[]
  groups        Group[]       @relation("GroupMembers")
  adminGroups   Group[]       @relation("GroupAdmin")

  expenses            Expense[]     @relation("PartOfExpenses")
  paidExpenses        Expense[]     @relation("PaidByExpenses")
  financialJoke       String?
  settlementsPaid     Settlements[] @relation("PaidSettlements")
  settlementsReceived Settlements[] @relation("ReceivedSettlements")
  Split               Split[]

  @@map("users")
}

model Transaction {
  id                String             @id @default(uuid())
  type              TransactionType
  amount            Decimal
  note              String
  date              DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isRecurring       Boolean            @default(false)
  lastProcessedDate DateTime?
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  isCompleted       Boolean            @default(true)
  reminderDays      Int?
  user              User?              @relation(fields: [userId], references: [id])
  userId            String?
  category          Category           @relation(fields: [categoryId], references: [id])
  categoryId        String
  account           Account?           @relation(fields: [accountId], references: [id])
  accountId         String?

  @@index([userId])
  @@map("transactions")
}

model Category {
  id        String          @id @default(uuid())
  type      TransactionType
  name      String
  iconUrl   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  budget       Budget[]
  transactions Transaction[]
  expenses     Expense[]

  @@index([userId])
  @@map("categories")
}

model Budget {
  id            String    @id @default(uuid())
  month         Int
  year          Int
  amount        Decimal
  lastAlertSent DateTime?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([userId])
  @@map("budgets")
}

model Account {
  id             String  @id @default(uuid())
  accountName    String
  currentBalance Decimal
  income         Decimal
  expense        Decimal
  isDefault      Boolean @default(false)

  transactions Transaction[]

  user           User      @relation(fields: [userId], references: [id])
  userId         String
  sharedExpenses Expense[]

  @@index([userId])
  @@map("accounts")
}

model Group {
  id          String    @id @default(uuid())
  members     User[]    @relation("GroupMembers")
  createdBy   User      @relation("GroupAdmin", fields: [adminId], references: [id])
  adminId     String
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expenses    Expense[]
}

model Expense {
  id           String        @id @default(uuid())
  splitType    SplitType
  amount       Decimal
  description  String
  date         DateTime
  splitMembers User[]        @relation("PartOfExpenses")
  paidByUser   User          @relation("PaidByExpenses", fields: [userId], references: [id])
  userId       String
  isSettled    Boolean       @default(false)
  group        Group?        @relation(fields: [groupId], references: [id])
  groupId      String?
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   String
  account      Account?      @relation(fields: [accountId], references: [id])
  accountId    String?
  settlements  Settlements[]
  splits       Split[]
}

model Split {
  id             String  @id @default(uuid())
  hasAlreadyPaid Boolean
  splitAmount    Decimal

  expense   Expense? @relation(fields: [expenseId], references: [id])
  expenseId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Settlements {
  id             String   @id @default(uuid())
  sentUser       User     @relation("PaidSettlements", fields: [sentUserId], references: [id])
  sentUserId     String
  receivedUser   User     @relation("ReceivedSettlements", fields: [receivedUserId], references: [id])
  receivedUserId String
  expense        Expense  @relation(fields: [expenseId], references: [id])
  expenseId      String
  amount         Decimal
  note           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum SplitType {
  PERCENTAGE
  AMOUNT
  EQUAL
}
